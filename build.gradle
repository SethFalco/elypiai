buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }

    dependencies {
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4"
    }
}

String projectVersion = "2.0.1"
String projectDescription = "Wrappers for many APIs available online from various services."
String projectGit = "https://gitlab.com/Elypia/Elypiai.git"

allprojects() {
    apply plugin: "idea"
    apply plugin: "jacoco"

    ext {
        retrofitVersion = "2.5.0"
        jaxbApiVersion = "2.3.1"
        jaxbImplVersion = "2.3.1"
        jaxbCoreVersion = "2.3.0.1"
        javaxActivationVersion = "1.1.1"
    }

    repositories {
        jcenter()
    }

    jacoco {
        toolVersion = "0.8.2"
    }
}

subprojects { subproject ->
    apply plugin: "java-library"
    apply plugin: "maven-publish"
    apply plugin: "com.jfrog.bintray"

    jar {
        from sourceSets.main.allSource

        manifest {
            attributes "Implementation-Title"   : this.name,
                       "Implementation-Version" : projectVersion
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = "sources"
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir

        javadoc {
            options.addBooleanOption("html5", true)

            options {
                links += [
                    "https://docs.oracle.com/javase/10/docs/api/"
                ]
            }
        }
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    bintray {
        user = System.getenv("BINTRAY_USER")
        key = System.getenv("BINTRAY_KEY")
        publications = [this.name]
        publish = true

        pkg {
            repo = this.name
            name = subproject.name
            userOrg = "elypia"
            licenses = ["Apache-2.0"]
            vcsUrl = projectGit

            version {
                name = projectVersion
                desc = projectDescription
                released = new Date()
            }
        }
    }

    publishing {
        def details = {
            licenses{
                license {
                    name "The Apache Software License, Version 2.0"
                    url "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    distribution this.name
                }
            }

            developers{
                developer {
                    id "Seth"
                    name "Seth"
                    email "seth@elypia.com"
                }
            }

            scm{
                url projectGit
            }
        }

        publications {
            Elypiai(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                groupId "com.elypia.elypiai"
                artifactId subproject.name
                version projectVersion

                pom.withXml {
                    def root = asNode()

                    root.appendNode("description", projectDescription)
                    root.appendNode("name", this.name)
                    root.appendNode("url", "https://elypia.com/")
                    root.children().last() + details
                }
            }
        }
    }

    dependencies {
        if (subproject.name != "common")
            implementation project(":common")

        // HTTP Requests
        implementation "com.squareup.retrofit2:retrofit:${retrofitVersion}"

        // Logging
        implementation group: "org.slf4j", name: "slf4j-api", version: "1.7.25"

        // Testing
        testImplementation 'com.squareup.okhttp3:mockwebserver:3.12.0'
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.3.1'

        testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.3.1'
        testRuntimeOnly group: 'org.junit.platform', name: 'junit-platform-runner', version: '1.3.1'
    }

    test {
        useJUnitPlatform()

        reports {
            html.enabled = false
        }
    }
}

configurations {
    codacy
}

repositories {
    maven {
        url "https://jitpack.io"
    }

    maven {
        url "http://dl.bintray.com/typesafe/maven-releases"
    }
}

dependencies {
    codacy 'com.github.codacy:codacy-coverage-reporter:-SNAPSHOT'
}

task jacocoMerge(type: JacocoMerge) {
    executionData = files(executionData.findAll { it.exists() })
}

task jacocoReport(type: JacocoReport, dependsOn: jacocoMerge) {
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs.findAll { it.asList() })
    classDirectories = files(subprojects.sourceSets.main.output.findAll { it.asList() })
    executionData = files(jacocoMerge.destinationFile)

    reports {
        html.enabled = false
        xml.enabled = true
    }
}

task codacyCoverage(type: JavaExec, dependsOn: jacocoReport) {
    main = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy

    args = [
        "report", "-l", "Java", "-r", "${buildDir}/reports/jacoco/jacocoReport/jacocoReport.xml"
    ]
}
